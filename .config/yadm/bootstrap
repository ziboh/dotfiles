#!/bin/bash

# Constants
NODE_VERSION=22.3
NEOVIM_VERSION="stable"
ZSH_CACHE_DIR="$HOME/.cache/zsh"
ZSH_COMPLETE="$HOME/.zsh-complete"

# Helper functions
install_package() {
    if command -v "$1" &> /dev/null; then
        echo "Package $1 is already installed"
    else
        echo "Installing $1..."
        sudo apt-get install -y "$2" >/dev/null
    fi
}

install_from_url() {
    local url="$1"
    local dest="$2"
    local name="$3"
    echo "Downloading $name..."
    curl -Lo "$name.tar.gz" "$url"
    tar -zxvf "$name.tar.gz" -C "$dest"
    rm -rf "$name.tar.gz"
    echo "$name has been installed."
}
 
# Setup directories
mkdir -p "$HOME/.zsh-complete" "$HOME/.cache/zsh" "$HOME/bin"

# Update directory variables with HOME
ZSH_CACHE_DIR="$HOME/.cache/zsh"
ZSH_COMPLETE="$HOME/.zsh-complete"

# Decrypt yadm
decrypt=false
for i in {1..3}; do
    yadm decrypt && decrypt=true && break || sleep 1
done

# Update yadm submodules
yadm submodule update --recursive --init

# Extend sudo timeout
sudo -v

# Install basic tools
install_package unzip unzip
install_package git git
install_package curl curl
install_package wget wget
install_package fdfind fd-find
install_package cmake cmake
install_package btop btop
install_package gcc build-essential
install_package zsh zsh && chsh -s "$(which zsh)"

# Install Node.js and Neovim
if [ ! -s "$NVM_DIR/nvm.sh" ]; then
    export NVM_DIR="$HOME/.nvm"
    git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
    cd "$NVM_DIR"
    git checkout "$(git describe --abbrev=0 --tags --match "v[0-9]*" "$(git rev-list --tags --max-count=1)")"
    . "$NVM_DIR/nvm.sh"
    nvm install "$NODE_VERSION"
    npm install -g neovim
fi

# Check if rye is installed
if ! command -v rye &> /dev/null
then
    echo "rye command not found. Installing rye..."
    # Install rye using the provided command
    curl -sSf https://rye.astral.sh/get | RYE_INSTALL_OPTION="--yes" bash
    rye self completion -s zsh > $HOME/.zfunc/_rye
else
    echo "rye is already installed."
fi

# Install fzf
if ! command -v fzf &> /dev/null; then
    latest=$(curl -s https://api.github.com/repos/junegunn/fzf/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
    url="https://github.com/junegunn/fzf/releases/download/${latest}/fzf-${latest}-linux_amd64.tar.gz"
    install_from_url "$url" "$HOME/bin" fzf
fi

# Check if starship command exists
if ! command -v starship &> /dev/null
then
    echo "Starship is not installed. Installing now..."
    # Execute the installation command
    curl -sS https://starship.rs/install.sh | sh -s -- -y
    # Check if installation was successful
    if command -v starship &> /dev/null
    then
        echo "Starship has been successfully installed."
    else
        echo "Failed to install Starship. Please check your internet connection or try manual installation."
    fi
else
    echo "Starship is already installed."
fi


# Install lazygit
if ! command -v lazygit &> /dev/null; then
    LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
    url="https://github.com/jesseduffield/lazygit/releases/download/v${LAZYGIT_VERSION}/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
    install_from_url "$url" "$HOME/bin" lazygit
fi

# Install Rust and related tools
if ! command -v cargo &> /dev/null; then
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y -q
    source "$HOME/.cargo/env"
    cargo install --git https://github.com/MordechaiHadad/bob.git
    bob use "$NEOVIM_VERSION"
    bob install "$NEOVIM_VERSION"
    bob use "$NEOVIM_VERSION"
    echo "Installing ripgrep..."
    cargo install ripgrep >/dev/null
    rg --generate complete-zsh > "$ZSH_COMPLETE/_rg"
    echo "Installing exa..."
    cargo install exa >/dev/null
fi

# Start zsh
# zsh
