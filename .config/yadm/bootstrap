#!/bin/bash

# Constants
NODE_VERSION=22.3
NEOVIM_VERSION="stable"

# Helper functions
install_package() {
    if command -v "$1" &>/dev/null; then
        echo "Package $1 is already installed"
    else
        echo "Installing $1..."
        sudo apt-get install -y "$2" >/dev/null
    fi
}

install_from_url() {
    local url="$1"
    local dest="$2"
    local name="$3"
    echo "Downloading $name..."
    curl -Lo "$name.tar.gz" "$url"
    tar -zxvf "$name.tar.gz" -C "$dest"
    rm -rf "$name.tar.gz"
    echo "$name has been installed."
}

is_wsl() {
    if [ -f /proc/sys/fs/binfmt_misc/WSLInterop ]; then
        return 0
    else
        return 1
    fi
}

# Setup directories
mkdir -p "$HOME/.zsh-complete" "$HOME/.cache/zsh" "$HOME/bin"

# Decrypt yadm
# 如果设置了 SKIP_YADM_DECRYPT 环境变量且值为 true 或 1，则跳过解密
if [[ "${SKIP_YADM_DECRYPT,,}" == "true" || "${SKIP_YADM_DECRYPT}" == "1" ]]; then
    echo "SKIP_YADM_DECRYPT is set, skipping yadm decryption."
else
    # 尝试解密 yadm，最多重试 3 次
    decrypt=false
    for _ in {1..3}; do
        if yadm decrypt; then
            decrypt=true
            break
        else
            sleep 1
        fi
    done

    # 如果解密失败，输出提示信息
    if [[ "$decrypt" == "false" ]]; then
        echo "Failed to decrypt yadm after 3 attempts."
    fi
fi

# Extend sudo timeout
sudo -v

# Install basic tools
install_package unzip unzip
install_package git git
install_package curl curl
install_package wget wget
install_package cmake cmake
install_package clang clang
install_package btop btop
install_package gcc build-essential

# 定义要检查的包名
PACKAGE_NAME="librime-dev"

# 检查包是否已安装
if dpkg -s $PACKAGE_NAME >/dev/null 2>&1; then
    echo "$PACKAGE_NAME 已经安装。"
else
    echo "$PACKAGE_NAME 未安装，正在安装..."
    sudo apt-get update
    sudo apt-get install -y $PACKAGE_NAME
    if dpkg -s $PACKAGE_NAME >/dev/null 2>&1; then
        echo "$PACKAGE_NAME 安装成功。"
    else
        echo "$PACKAGE_NAME 安装失败。"
        exit 1
    fi
fi

# Check if rye is installed
if ! command -v rye &>/dev/null; then
    echo "rye command not found. Installing rye..."
    # Install rye using the provided command
    curl -sSf https://rye.astral.sh/get | RYE_INSTALL_OPTION="--yes" bash
    source $HOME/.rye/env
    if is_wsl; then
        rye tools install --git https://github.com/cpbotha/xdg-open-wsl.git xdg-open-wsl
    fi
else
    echo "rye is already installed."
fi

# Install fzf
if ! command -v fzf &>/dev/null; then
    latest=$(curl -s https://api.github.com/repos/junegunn/fzf/releases/latest | grep -oP '"tag_name": "v\K(.*)(?=")')
    url="https://github.com/junegunn/fzf/releases/download/v${latest}/fzf-${latest}-linux_amd64.tar.gz"
    install_from_url "$url" "$HOME/bin" fzf
fi

# Install fd
if ! command -v fd &>/dev/null; then
    latest=$(curl -s https://api.github.com/repos/sharkdp/fd/releases/latest | grep -oP '"tag_name": "v\K(.*)(?=")')
    echo "Installing fd v${latest}..."
    url="https://github.com/sharkdp/fd/releases/download/v${latest}/fd-musl_${latest}_amd64.deb"
    echo "downloading $url"
    curl -sSLo "fd.deb" "$url"
    sudo dpkg -i fd.deb
    rm fd.deb
fi

# Check if starship command exists
if ! command -v starship &>/dev/null; then
    echo "Starship is not installed. Installing now..."
    # Execute the installation command
    curl -sS https://starship.rs/install.sh | sh -s -- -y
    # Check if installation was successful
    if command -v starship &>/dev/null; then
        echo "Starship has been successfully installed."
    else
        echo "Failed to install Starship. Please check your internet connection or try manual installation."
    fi
else
    echo "Starship is already installed."
fi

# Install lazygit
if ! command -v lazygit &>/dev/null; then
    LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
    url="https://github.com/jesseduffield/lazygit/releases/download/v${LAZYGIT_VERSION}/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
    install_from_url "$url" "$HOME/bin" lazygit
fi

# Install zoxide
if ! command -v zoxide &>/dev/null; then
    latest=$(curl -s https://api.github.com/repos/ajeetdsouza/zoxide/releases/latest | grep -oP '"tag_name": "v\K(.*)(?=")')
    url="https://github.com/ajeetdsouza/zoxide/releases/download/v${latest}/zoxide-${latest}-x86_64-unknown-linux-musl.tar.gz"
    install_from_url "$url" "$HOME/bin" zoxide
fi

if ! command -v rime_ls &>/dev/null; then
    latest=$(curl -s "https://api.github.com/repos/wlh320/rime-ls/releases/latest" | grep -oP '"tag_name": "v\K(.*)(?=")')
    url="https://github.com/wlh320/rime-ls/releases/download/v${latest}/rime-ls-v${latest}-x86_64-unknown-linux-gnu.tar.gz"
    install_from_url "$url" "$HOME/bin" rime_ls
fi

if ! command -v btm &>/dev/null; then
    latest=$(curl -s https://api.github.com/repos/ClementTsang/bottom/releases/latest | grep -Po '"tag_name": "\K(.*)(?=")')
    echo "Installing bottom v${latest}..."
    url="https://github.com/ClementTsang/bottom/releases/download/${latest}/bottom_${latest}-1_amd64.deb"
    echo "downloading $url"
    curl -sSLo "bottom.deb" "$url"
    sudo dpkg -i bottom.deb
    rm bottom.deb
fi

if ! command -v rclone &>/dev/null; then
    latest=$(curl -s "https://api.github.com/repos/rclone/rclone/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
    url="https://github.com/rclone/rclone/releases/download/v${latest}/rclone-v${latest}-linux-amd64.deb"
    echo "downloading $url"
    curl -sSLo "rclone.deb" "$url"
    sudo dpkg -i rclone.deb
    rm fd.deb
fi

# Install Rust and related tools
if ! command -v cargo &>/dev/null; then
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y -q
    source "$HOME/.cargo/env"
fi

if ! command -v bob &>/dev/null; then
    echo "Installing bob..."
    cargo install --git https://github.com/MordechaiHadad/bob.git
    bob use "$NEOVIM_VERSION"
    bob install "$NEOVIM_VERSION"
    bob use "$NEOVIM_VERSION"
fi

if ! command -v rg &>/dev/null; then
    echo "Installing ripgrep..."
    cargo install ripgrep >/dev/null
fi

if ! command -v exa &>/dev/null; then
    echo "Installing exa..."
    cargo install exa >/dev/null
fi

if ! command -v fnm &>/dev/null; then
    echo "Installing fnm..."
    cargo install fnm >/dev/null
    fnm install $NODE_VERSION
fi

if ! command -v nu &>/dev/null; then
    echo "Installing nu..."
    cargo install nu --locked
fi

install_package zsh zsh
# 获取当前 shell 的名称
current_shell=$(basename "$SHELL")

# 判断当前 shell 是否是 Zsh
if [ "$current_shell" != "nu" ]; then
    # 如果不是 Zsh，则切换到 Zsh
    chsh -s "$(which nu)"
    echo "已切换到 Nushell。请重新登录以生效。"
    zsh
else
    echo "当前已经是 Nushell，无需切换。"
fi
