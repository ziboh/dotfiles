#!/bin/bash
PYTHON_VERSION=3.12.4
NEOVIM_VERSION="stable"
ZSH_CACHE_DIR="$HOME/.cache/zsh"
ZSH_COMPLETE="$HOME/.zsh-complete"
mkdir -p "$ZSH_COMPLETE"
cd "$HOME"
decrypt=false
count=0
while [ $count -lt 5 ]; do
	yadm decrypt
	if [ $? -eq 0 ]; then # 判断上一个命令是否执行成功
		decrypt=true
		break # 如果执行成功，跳出循环
	fi
	((count++))
done

sudo apt update &>/dev/null
if [ -z $(which unzip) ]; then
	echo "install unzip"
	sudo apt-get install unzip -y &>/dev/null
fi

if [ -z $(which git) ]; then
	echo "install git"
	sudo apt-get install git -y &>/dev/null
fi

if [ -z $(which curl) ]; then
	echo "install curl"
	sudo apt-get install curl -y &>/dev/null
fi

if [ -z $(which wget) ]; then
	echo "install wget"
	sudo apt-get install wget -y &>/dev/null
fi

if [ -z $(which zsh) ]; then
	echo "install zsh"
	sudo apt install libmagickwand-dev -y &>/dev/null
	sudo apt-get install zsh -y &>/dev/null
	chsh -s $(which zsh)
fi
sudo apt install libmagickwand-dev -y &>/dev/null

if [ -z $(which btop) ]; then
	echo "install btop"
	sudo apt-get install btop -y &>/dev/null
fi

if [ -z $(which gcc) ]; then
	echo "intall gcc"
	sudo apt-get install build-essential -y &>/dev/null
fi

if [ -z $(which rclone) ]; then
	echo "intall rclone"
	sudo -v
	curl https://rclone.org/install.sh | sudo bash
fi

if $decrypt; then
	source .encrypt.zsh
	for i in {1..3}; do
		if curl --max-time 5 -o /dev/null --silent https://google.com; then
			echo "Network connection successful."
			break
		elif [ $i -eq 3 ]; then
			echo "Unable to connect to Google after 3 attempts. Setting proxy."
			proxy
			echo "setting http proxy: $http_proxy"
		else
			echo "Attempt $i failed. Trying again."
		fi
	done
fi

if [ ! -s "$NVM_DIR/nvm.sh" ]; then
	export NVM_DIR="$HOME/.nvm" && (
		git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
		cd "$NVM_DIR"
		git checkout $(git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1))
	) && \. "$NVM_DIR/nvm.sh"
	echo "nvm install node"
	cd $HOME
	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
	nvm install node
	npm install -g neovim
fi

if [ ! -d "$HOME/.pyenv" ]; then
	sudo apt install -y liblzma-dev build-essential libreadline-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev &>/dev/null
	git clone https://github.com/pyenv/pyenv.git ~/.pyenv
	[ $? -eq 0 ] && echo "pyenv install done"
	export PYENV_ROOT="$HOME/.pyenv"
	echo $PYTHON_VERSION >"$PYENV_ROOT/version"
	export PATH="$PYENV_ROOT/bin:$PATH"
	eval "$(pyenv init -)"
	pyenv install $PYTHON_VERSION
	pyenv shell $PYTHON_VERSION
	$HOME/.pyenv/versions/$PYTHON_VERSION/bin/python -m pip install --upgrade pip
	$HOME/.pyenv/versions/$PYTHON_VERSION/bin/python -m pip install thefuck
fi

if [ -d "$HOME/.pyenv" ]; then
	if [ ! -d "$PYENV_ROOT/plugins/pyenv-virtualenv" ]; then
		git clone https://github.com/pyenv/pyenv-virtualenv.git $PYENV_ROOT/plugins/pyenv-virtualenv
		pyenv virtualenv $PYTHON_VERSION pynvim
		$HOME/.pyenv/versions/pynvim/bin/python -m pip install --upgrade pip
		$HOME/.pyenv/versions/pynvim/bin/python -m pip install pynvim
	fi
fi

if [ ! -d "$HOME/bin" ]; then
	mkdir $HOME/bin
fi

if [ -z $(which fzf) ]; then
	# 从 Github API 获取最新的 fzf release 发布名称和版本号
	latest=$(curl -s https://api.github.com/repos/junegunn/fzf/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')

	# 构建最新的 fzf release 下载链接
	url="https://github.com/junegunn/fzf/releases/download/${latest}/fzf-${latest}-linux_amd64.tar.gz"
	echo "Download fzf..."
	curl -Lo fzf.tar.gz $url
	tar -zxvf fzf.tar.gz -C ~/bin
	rm -rf fzf.tar.gz
fi

if [ ! -f "/usr/local/bin/lazygit" ]; then
	LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
	echo "Download lazygit..."
	curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
	tar xf lazygit.tar.gz lazygit
	sudo install lazygit /usr/local/bin
	rm -rf lazygit.tar.gz lazygit
fi

if [ ! -d "$ZSH_CACHE_DIR" ]; then
	mkdir -p $ZSH_CACHE_DIR
fi

if [ -z $(which cargo) ]; then
	curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y -q
	source "$HOME/.cargo/env"
	cargo install --git https://github.com/MordechaiHadad/bob.git
	bob use $NEOVIM_VERSION
	bob install $NEOVIM_VERSION
	bob use $NEOVIM_VERSION
	echo "Install ripgrep"
	cargo install ripgrep >/dev/null
	rg --generate complete-zsh >"$ZSH_COMPLETE/_rg"
	echo "Install exa"
	cargo install exa >/dev/null
fi
yadm submodule update --recursive --init
zsh
